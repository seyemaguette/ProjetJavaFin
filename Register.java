/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package etudiant;

import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
public class Register extends javax.swing.JFrame{

    /**
     * Creates new form Register
     */
    public Register()  {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labeltypeutilisateur = new java.awt.Label();
        labelpassword2 = new java.awt.Label();
        confirmationMotDePasseField = new javax.swing.JPasswordField();
        labelpassword1 = new java.awt.Label();
        passwordField = new javax.swing.JPasswordField();
        buttonEnregistrer = new java.awt.Button();
        lienConnexion = new java.awt.Label();
        labelusername = new java.awt.Label();
        usernameField = new java.awt.TextField();
        typeUtilisateurComboBox = new javax.swing.JComboBox<>();
        errorLabel = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RegisterEtudiant");
        setBackground(new java.awt.Color(239, 251, 255));
        setPreferredSize(new java.awt.Dimension(800, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(248, 248, 243));
        jPanel1.setPreferredSize(new java.awt.Dimension(800, 500));
        jPanel1.setLayout(null);

        labeltypeutilisateur.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labeltypeutilisateur.setForeground(new java.awt.Color(102, 204, 255));
        labeltypeutilisateur.setText("Type d'utilisateur :");
        jPanel1.add(labeltypeutilisateur);
        labeltypeutilisateur.setBounds(30, 220, 320, 30);

        labelpassword2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelpassword2.setForeground(new java.awt.Color(102, 204, 255));
        labelpassword2.setText("Confirmation du mot de pass :");
        jPanel1.add(labelpassword2);
        labelpassword2.setBounds(410, 220, 360, 33);

        confirmationMotDePasseField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        confirmationMotDePasseField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmationMotDePasseFieldActionPerformed(evt);
            }
        });
        jPanel1.add(confirmationMotDePasseField);
        confirmationMotDePasseField.setBounds(410, 260, 320, 40);

        labelpassword1.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelpassword1.setForeground(new java.awt.Color(102, 204, 255));
        labelpassword1.setText("Mot de pass :");
        jPanel1.add(labelpassword1);
        labelpassword1.setBounds(420, 90, 330, 40);

        passwordField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });
        jPanel1.add(passwordField);
        passwordField.setBounds(420, 140, 300, 40);

        buttonEnregistrer.setBackground(new java.awt.Color(102, 204, 255));
        buttonEnregistrer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonEnregistrer.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        buttonEnregistrer.setForeground(new java.awt.Color(255, 255, 255));
        buttonEnregistrer.setLabel("S'inscrire");
        buttonEnregistrer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonEnregistrerActionPerformed(evt);
            }
        });
        jPanel1.add(buttonEnregistrer);
        buttonEnregistrer.setBounds(210, 330, 330, 40);
        buttonEnregistrer.getAccessibleContext().setAccessibleName("S'incrire");

        lienConnexion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lienConnexion.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lienConnexion.setForeground(new java.awt.Color(102, 204, 255));
        lienConnexion.setText("Se connecter si vous avez un compte");
        lienConnexion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lienConnexionMouseClicked(evt);
            }
        });
        jPanel1.add(lienConnexion);
        lienConnexion.setBounds(210, 390, 450, 30);

        labelusername.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        labelusername.setForeground(new java.awt.Color(102, 204, 255));
        labelusername.setText("Code Permenant :");
        jPanel1.add(labelusername);
        labelusername.setBounds(30, 100, 320, 30);

        usernameField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        usernameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usernameFieldActionPerformed(evt);
            }
        });
        jPanel1.add(usernameField);
        usernameField.setBounds(30, 140, 270, 40);

        typeUtilisateurComboBox.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        typeUtilisateurComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "etudiant", "personnel", "admin" }));
        typeUtilisateurComboBox.setSelectedItem(typeUtilisateurComboBox);
        typeUtilisateurComboBox.setAutoscrolls(true);
        typeUtilisateurComboBox.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        typeUtilisateurComboBox.setName(""); // NOI18N
        typeUtilisateurComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeUtilisateurComboBoxActionPerformed(evt);
            }
        });
        jPanel1.add(typeUtilisateurComboBox);
        typeUtilisateurComboBox.setBounds(30, 260, 280, 40);

        errorLabel.setAlignment(java.awt.Label.CENTER);
        errorLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        jPanel1.add(errorLabel);
        errorLabel.setBounds(150, 430, 480, 30);

        getContentPane().add(jPanel1);
        jPanel1.setBounds(-10, -10, 810, 470);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonEnregistrerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonEnregistrerActionPerformed
        // TODO add your handling code here:
        enregistrerUtilisateur();
    }//GEN-LAST:event_buttonEnregistrerActionPerformed

    private void usernameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usernameFieldActionPerformed
      // TODO add your handling code here:
    }//GEN-LAST:event_usernameFieldActionPerformed

    private void typeUtilisateurComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeUtilisateurComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeUtilisateurComboBoxActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void confirmationMotDePasseFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmationMotDePasseFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_confirmationMotDePasseFieldActionPerformed

    private void lienConnexionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienConnexionMouseClicked
        // TODO add your handling code here:
         Login loginPage = new Login();
                loginPage.setVisible(true);
                this.dispose();
    }//GEN-LAST:event_lienConnexionMouseClicked

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Register.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Register().setVisible(true);
//            }
//        });
//    }
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button buttonEnregistrer;
    private javax.swing.JPasswordField confirmationMotDePasseField;
    private java.awt.Label errorLabel;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label labelpassword1;
    private java.awt.Label labelpassword2;
    private java.awt.Label labeltypeutilisateur;
    private java.awt.Label labelusername;
    private java.awt.Label lienConnexion;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JComboBox<String> typeUtilisateurComboBox;
    private java.awt.TextField usernameField;
    // End of variables declaration//GEN-END:variables




   private void enregistrerUtilisateur() {
        int nomUtilisateur = Integer.parseInt(usernameField.getText());
        char[] motDePass = passwordField.getPassword();
        // Conversion du tableau en string
        String motDePasse = new String(motDePass);


        char[] confirmationMotDePass = confirmationMotDePasseField.getPassword();
        // Conversion du tableau en string
        String confirmationMotDePasse = new String(confirmationMotDePass);
        
        String typeUtilisateur = (String) typeUtilisateurComboBox.getSelectedItem();
        
        
        if (nomUtilisateur==0 || motDePasse.isEmpty() || confirmationMotDePasse.isEmpty()) {
            setErrorLabel("Veuillez remplir tous les champs.");
            
        }

        if (!(motDePasse.equals(confirmationMotDePasse))) {
            setErrorLabel("Les mots de passe ne correspondent pas.");
            
        }

          // Vérifier si le nom d'utilisateur est déjà utilisé
    if (usernameExists(nomUtilisateur)) {
        setErrorLabel("Nom d'utilisateur déjà utilisé. Veuillez en choisir un autre.");
        
    }  else{
        // Connexion à la base de données MySQL
         Connection connection = connecterDB.connecterDB();
        if (connection != null ) try{
            
           
          
            // Requête SQL pour l'insertion de l'utilisateur
            String sql = "INSERT INTO utilisateurs (id, motDePasse, type_utilisateur) VALUES ( ?, ?,?)";
            PreparedStatement preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setInt(1, nomUtilisateur);
            preparedStatement.setString(2, motDePasse);
            preparedStatement.setString(3, typeUtilisateur);

            // Exécution de la requête
           int etat= preparedStatement.executeUpdate();
           
           if (etat>0){
           
           // Ouvrir la fenêtre Infos
           if(typeUtilisateur.equals("etudiant")){
             NewEtudiant infos = new NewEtudiant();
             infos.setVisible(true);
           
           
           }else{
           AcceuilEtudiant infos = new AcceuilEtudiant();
             infos.setVisible(true);
              // Fermer la fenêtre courante  
            this.dispose(); 
           }
           
           }
           
               
            
        } catch (Exception ex) {
               setErrorLabel("Erreur lors de l'inscription : " + ex.getMessage());
//            JOptionPane.showMessageDialog(this, "Erreur lors de l'enregistrement de l'utilisateur: " + ex.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
               connecterDB.fermerConnexion(connection);
        } 
    }
        
    
    }
   
   private boolean usernameExists(int username) {
    // Connexion à la base de données
    Connection connection = null;
    PreparedStatement statement = null;
    ResultSet resultSet = null;
    try {
        connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

        // Requête SQL pour vérifier si le nom d'utilisateur existe déjà
        String sql = "SELECT COUNT(*) FROM utilisateurs WHERE id = ?";
        statement = connection.prepareStatement(sql);
        statement.setInt(1, username);
        resultSet = statement.executeQuery();

        // Analyser le résultat
        if (resultSet.next()) {
            int count = resultSet.getInt(1);
            return count > 0; // Retourne vrai si le nom d'utilisateur existe déjà, sinon faux
        }
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        // Fermeture des ressources
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        if (connection != null) {
            try {
                connection.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    return false; // En cas d'erreur ou si aucun résultat n'est retourné
}
   
    private void setErrorLabel(String message) {
        errorLabel.setText("Erreur : " + message);
    }

    
   
}
