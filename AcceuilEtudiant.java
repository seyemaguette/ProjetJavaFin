/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package etudiant;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Soxna Maguette
 */
public class AcceuilEtudiant extends javax.swing.JFrame {

    /**
     * Creates new form AcceuilEtudiant
     */
    public AcceuilEtudiant() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        etudiant = new java.awt.Panel();
        MenuEtudiant = new java.awt.Panel();
        buttonDeconnexion = new java.awt.Button();
        buttonMonProfil1 = new java.awt.Button();
        buttonModifierProfil1 = new java.awt.Button();
        buttonAmis1 = new java.awt.Button();
        MonProfil = new java.awt.Panel();
        InformationEtudiant1 = new java.awt.Button();
        CursusUniversitaire1 = new java.awt.Button();
        buttonParcoursPro = new java.awt.Button();
        InscriptionMaster1 = new java.awt.Button();
        afficheifosetudaiant = new java.awt.Panel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableinfosetudiant = new javax.swing.JTable();
        afficheCursus = new java.awt.Panel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCursus = new javax.swing.JTable();
        afficheInscriptionMaster = new java.awt.Panel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableInscriptionMaster = new javax.swing.JTable();
        afficheParcourPro = new java.awt.Panel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableParcourPro = new javax.swing.JTable();
        MenuModifierProfil = new java.awt.Panel();
        InscriptionMaster = new java.awt.Button();
        InformationEtudiant = new java.awt.Button();
        CursusUniversitaire = new java.awt.Button();
        button6 = new java.awt.Button();
        ModifierInfosEtudiant = new java.awt.Panel();
        label7 = new java.awt.Label();
        mail = new java.awt.TextField();
        buttonInfosEtudiant = new java.awt.Button();
        label8 = new java.awt.Label();
        docimil = new java.awt.TextField();
        label10 = new java.awt.Label();
        tel = new java.awt.TextField();
        label11 = new java.awt.Label();
        label12 = new java.awt.Label();
        pnom = new java.awt.TextField();
        datenais = new java.awt.TextField();
        label22 = new java.awt.Label();
        nomuetu = new java.awt.TextField();
        errorLabel1 = new java.awt.Label();
        ModifierCursusUniversite = new java.awt.Panel();
        label13 = new java.awt.Label();
        label14 = new java.awt.Label();
        anDebut = new java.awt.TextField();
        anFin = new java.awt.TextField();
        buttonModifirCursus = new java.awt.Button();
        errorLabel2 = new java.awt.Label();
        ModifierParcoursPro = new java.awt.Panel();
        label15 = new java.awt.Label();
        anneFinPro = new java.awt.TextField();
        contrat = new java.awt.TextField();
        entreprise = new java.awt.TextField();
        posteOccupe = new java.awt.TextField();
        anneeDebutPro = new java.awt.TextField();
        boutonParcoursPro = new java.awt.Button();
        label16 = new java.awt.Label();
        label17 = new java.awt.Label();
        label18 = new java.awt.Label();
        label19 = new java.awt.Label();
        ModifierInscriptionMaster = new java.awt.Panel();
        label20 = new java.awt.Label();
        nMaster = new java.awt.TextField();
        universite = new java.awt.TextField();
        label21 = new java.awt.Label();
        button10 = new java.awt.Button();
        errorLabel3 = new java.awt.Label();
        Amis = new java.awt.Panel();
        label1 = new java.awt.Label();
        jScrollPane4 = new javax.swing.JScrollPane();
        afficheAmis = new javax.swing.JTable();
        authentification = new java.awt.Panel();
        infos = new javax.swing.JPanel();
        label2 = new java.awt.Label();
        textField1 = new java.awt.TextField();
        jPasswordField1 = new javax.swing.JPasswordField();
        lienRegister = new java.awt.Label();
        button2 = new java.awt.Button();
        label4 = new java.awt.Label();
        jComboBox1 = new javax.swing.JComboBox<>();
        label3 = new java.awt.Label();
        errorLabel = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        personnel = new java.awt.Panel();
        buttonDeconnexionPersonnel = new java.awt.Button();
        buttonVerificatioDiplome = new java.awt.Button();
        buttonGestionDiplome = new java.awt.Button();
        buttonExploitationDonnees = new java.awt.Button();
        afficheGestionDesDiplomes = new java.awt.Panel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tableGestionDiplome = new javax.swing.JTable();
        plusInfos = new java.awt.Panel();
        jScrollPane8 = new javax.swing.JScrollPane();
        infosInscriptionMaster = new javax.swing.JTable();
        jScrollPane10 = new javax.swing.JScrollPane();
        InfostableCursus = new javax.swing.JTable();
        jScrollPane11 = new javax.swing.JScrollPane();
        infosParcoursPro = new javax.swing.JTable();
        label5 = new java.awt.Label();
        label6 = new java.awt.Label();
        label9 = new java.awt.Label();
        verificationDiplomes = new java.awt.Panel();
        label23 = new java.awt.Label();
        codePermanentVerification = new java.awt.TextField();
        buttonVerificationDiplomes = new java.awt.Button();
        labelVerifier = new java.awt.Label();
        panel1 = new java.awt.Panel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tableauVerification = new javax.swing.JTable();
        jScrollPane9 = new javax.swing.JScrollPane();
        TableCursus = new javax.swing.JTable();
        ExploitationDonnees = new java.awt.Panel();
        nomreContrat = new java.awt.Label();
        nombreInscriptionMaster = new java.awt.Label();
        nombreEtudiants = new java.awt.Label();
        jScrollPane12 = new javax.swing.JScrollPane();
        tableauparcourPro = new javax.swing.JTable();
        jScrollPane13 = new javax.swing.JScrollPane();
        inscriptionMaster = new javax.swing.JTable();
        admin = new java.awt.Panel();
        buttonGestionDiplome1 = new java.awt.Button();
        buttonGestionDiplome2 = new java.awt.Button();
        buttonGestionUtilisateurs = new java.awt.Button();
        affichageUtilisateurs = new java.awt.Panel();
        jScrollPane14 = new javax.swing.JScrollPane();
        tablePersonnel = new javax.swing.JTable();
        jScrollPane15 = new javax.swing.JScrollPane();
        tableEtudiant = new javax.swing.JTable();
        SupprimerUtilisateur = new java.awt.Panel();
        label24 = new java.awt.Label();
        codePermanentSupprimer = new java.awt.TextField();
        buttonSupprimmerUtilisateur = new java.awt.Button();
        labelVerifier1 = new java.awt.Label();
        panel2 = new java.awt.Panel();
        jScrollPane16 = new javax.swing.JScrollPane();
        tableauVerification1 = new javax.swing.JTable();
        jScrollPane17 = new javax.swing.JScrollPane();
        TableCursus1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Acceuil Etudiant");
        setMinimumSize(new java.awt.Dimension(950, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        etudiant.setBackground(new java.awt.Color(248, 248, 243));
        etudiant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        etudiant.setVisible(false);
        etudiant.setLayout(null);

        MenuEtudiant.setBackground(new java.awt.Color(102, 204, 255));
        MenuEtudiant.setLayout(null);

        buttonDeconnexion.setActionCommand("Deconnexion");
        buttonDeconnexion.setBackground(new java.awt.Color(102, 204, 255));
        buttonDeconnexion.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonDeconnexion.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonDeconnexion.setForeground(new java.awt.Color(255, 255, 255));
        buttonDeconnexion.setLabel("Deconnexion");
        buttonDeconnexion.setName(""); // NOI18N
        buttonDeconnexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeconnexionActionPerformed(evt);
            }
        });
        MenuEtudiant.add(buttonDeconnexion);
        buttonDeconnexion.setBounds(770, 0, 120, 30);

        buttonMonProfil1.setActionCommand("Mon Profil");
        buttonMonProfil1.setBackground(new java.awt.Color(102, 204, 255));
        buttonMonProfil1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonMonProfil1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonMonProfil1.setForeground(new java.awt.Color(255, 255, 255));
        buttonMonProfil1.setLabel("Mon Profil");
        buttonMonProfil1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMonProfil1ActionPerformed(evt);
            }
        });
        MenuEtudiant.add(buttonMonProfil1);
        buttonMonProfil1.setBounds(30, 0, 120, 30);

        buttonModifierProfil1.setActionCommand("Modifier Profil");
        buttonModifierProfil1.setBackground(new java.awt.Color(102, 204, 255));
        buttonModifierProfil1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonModifierProfil1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonModifierProfil1.setForeground(new java.awt.Color(255, 255, 255));
        buttonModifierProfil1.setLabel("Modifier Profil");
        buttonModifierProfil1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModifierProfil1ActionPerformed(evt);
            }
        });
        MenuEtudiant.add(buttonModifierProfil1);
        buttonModifierProfil1.setBounds(210, 0, 120, 30);

        buttonAmis1.setActionCommand("Amis(es)");
        buttonAmis1.setBackground(new java.awt.Color(102, 204, 255));
        buttonAmis1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonAmis1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonAmis1.setForeground(new java.awt.Color(255, 255, 255));
        buttonAmis1.setLabel("Amis(es)");
        buttonAmis1.setName(""); // NOI18N
        buttonAmis1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAmis1ActionPerformed(evt);
            }
        });
        MenuEtudiant.add(buttonAmis1);
        buttonAmis1.setBounds(400, 0, 120, 30);

        etudiant.add(MenuEtudiant);
        MenuEtudiant.setBounds(0, 0, 940, 30);

        MonProfil.setBackground(new java.awt.Color(248, 248, 243));
        MonProfil.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        MonProfil.setForeground(new java.awt.Color(255, 255, 255));
        MonProfil.setVisible(false);
        MonProfil.setLayout(null);

        InformationEtudiant1.setBackground(new java.awt.Color(255, 255, 255));
        InformationEtudiant1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        InformationEtudiant1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        InformationEtudiant1.setForeground(new java.awt.Color(102, 204, 255));
        InformationEtudiant1.setLabel("Information Etudiant");
        InformationEtudiant1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformationEtudiant1ActionPerformed(evt);
            }
        });
        MonProfil.add(InformationEtudiant1);
        InformationEtudiant1.setBounds(30, 30, 180, 40);

        CursusUniversitaire1.setBackground(new java.awt.Color(255, 255, 255));
        CursusUniversitaire1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CursusUniversitaire1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CursusUniversitaire1.setForeground(new java.awt.Color(102, 204, 255));
        CursusUniversitaire1.setLabel("Cursus Universitaire");
        CursusUniversitaire1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CursusUniversitaire1ActionPerformed(evt);
            }
        });
        MonProfil.add(CursusUniversitaire1);
        CursusUniversitaire1.setBounds(280, 30, 180, 40);

        buttonParcoursPro.setBackground(new java.awt.Color(255, 255, 255));
        buttonParcoursPro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonParcoursPro.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        buttonParcoursPro.setForeground(new java.awt.Color(102, 204, 255));
        buttonParcoursPro.setLabel("Parcours Professionnel");
        buttonParcoursPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonParcoursProActionPerformed(evt);
            }
        });
        MonProfil.add(buttonParcoursPro);
        buttonParcoursPro.setBounds(510, 30, 180, 40);

        InscriptionMaster1.setBackground(new java.awt.Color(255, 255, 255));
        InscriptionMaster1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        InscriptionMaster1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        InscriptionMaster1.setForeground(new java.awt.Color(102, 204, 255));
        InscriptionMaster1.setLabel("Inscription Master");
        InscriptionMaster1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InscriptionMaster1ActionPerformed(evt);
            }
        });
        MonProfil.add(InscriptionMaster1);
        InscriptionMaster1.setBounds(730, 30, 180, 40);

        afficheifosetudaiant.setVisible(false);
        afficheifosetudaiant.setLayout(null);

        tableinfosetudiant.setColumnSelectionAllowed(true);
        tableinfosetudiant.setName("vos infos"); // NOI18N
        tableinfosetudiant.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentRemoved(java.awt.event.ContainerEvent evt) {
                tableinfosetudiantComponentRemoved(evt);
            }
        });
        jScrollPane1.setViewportView(tableinfosetudiant);
        tableinfosetudiant.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        afficheifosetudaiant.add(jScrollPane1);
        jScrollPane1.setBounds(12, 20, 860, 110);

        MonProfil.add(afficheifosetudaiant);
        afficheifosetudaiant.setBounds(20, 90, 890, 320);

        afficheCursus.setVisible(false);
        afficheCursus.setLayout(null);

        tableCursus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableCursus);

        afficheCursus.add(jScrollPane2);
        jScrollPane2.setBounds(10, 10, 460, 120);

        MonProfil.add(afficheCursus);
        afficheCursus.setBounds(180, 120, 470, 140);

        afficheInscriptionMaster.setVisible(false);
        afficheInscriptionMaster.setLayout(null);

        tableInscriptionMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableInscriptionMaster.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableInscriptionMasterMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableInscriptionMaster);

        afficheInscriptionMaster.add(jScrollPane3);
        jScrollPane3.setBounds(0, 10, 460, 120);

        MonProfil.add(afficheInscriptionMaster);
        afficheInscriptionMaster.setBounds(180, 120, 470, 140);

        afficheParcourPro.setVisible(false);
        afficheParcourPro.setLayout(null);

        tableParcourPro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableParcourPro.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableParcourProMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tableParcourPro);

        afficheParcourPro.add(jScrollPane5);
        jScrollPane5.setBounds(0, 10, 710, 120);

        MonProfil.add(afficheParcourPro);
        afficheParcourPro.setBounds(150, 120, 720, 140);

        etudiant.add(MonProfil);
        MonProfil.setBounds(10, 50, 920, 430);

        MenuModifierProfil.setBackground(new java.awt.Color(255, 255, 255));
        MenuModifierProfil.setVisible(false);
        MenuModifierProfil.setLayout(null);

        InscriptionMaster.setBackground(new java.awt.Color(255, 255, 255));
        InscriptionMaster.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        InscriptionMaster.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        InscriptionMaster.setForeground(new java.awt.Color(102, 204, 255));
        InscriptionMaster.setLabel("Inscription Master");
        InscriptionMaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InscriptionMasterActionPerformed(evt);
            }
        });
        MenuModifierProfil.add(InscriptionMaster);
        InscriptionMaster.setBounds(0, 340, 180, 40);

        InformationEtudiant.setBackground(new java.awt.Color(255, 255, 255));
        InformationEtudiant.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        InformationEtudiant.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        InformationEtudiant.setForeground(new java.awt.Color(102, 204, 255));
        InformationEtudiant.setLabel("Information Etudiant");
        InformationEtudiant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InformationEtudiantActionPerformed(evt);
            }
        });
        MenuModifierProfil.add(InformationEtudiant);
        InformationEtudiant.setBounds(0, 0, 180, 40);

        CursusUniversitaire.setBackground(new java.awt.Color(255, 255, 255));
        CursusUniversitaire.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CursusUniversitaire.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        CursusUniversitaire.setForeground(new java.awt.Color(102, 204, 255));
        CursusUniversitaire.setLabel("Cursus Universitaire");
        CursusUniversitaire.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CursusUniversitaireActionPerformed(evt);
            }
        });
        MenuModifierProfil.add(CursusUniversitaire);
        CursusUniversitaire.setBounds(0, 110, 180, 40);

        button6.setBackground(new java.awt.Color(255, 255, 255));
        button6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        button6.setForeground(new java.awt.Color(102, 204, 255));
        button6.setLabel("Parcours Professionnel");
        button6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button6ActionPerformed(evt);
            }
        });
        MenuModifierProfil.add(button6);
        button6.setBounds(0, 220, 180, 40);

        etudiant.add(MenuModifierProfil);
        MenuModifierProfil.setBounds(30, 50, 180, 380);

        ModifierInfosEtudiant.setBackground(new java.awt.Color(242, 242, 242));
        ModifierInfosEtudiant.setVisible(false);
        ModifierInfosEtudiant.setLayout(null);

        label7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label7.setForeground(new java.awt.Color(102, 204, 255));
        label7.setText("Email  :");
        ModifierInfosEtudiant.add(label7);
        label7.setBounds(390, 120, 230, 25);

        mail.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(mail);
        mail.setBounds(390, 150, 210, 40);

        buttonInfosEtudiant.setBackground(new java.awt.Color(102, 204, 255));
        buttonInfosEtudiant.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonInfosEtudiant.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonInfosEtudiant.setForeground(new java.awt.Color(255, 255, 255));
        buttonInfosEtudiant.setLabel("Modifier");
        buttonInfosEtudiant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonInfosEtudiantActionPerformed(evt);
            }
        });
        ModifierInfosEtudiant.add(buttonInfosEtudiant);
        buttonInfosEtudiant.setBounds(220, 320, 210, 40);

        label8.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label8.setForeground(new java.awt.Color(102, 204, 255));
        label8.setText("Domicile  :");
        ModifierInfosEtudiant.add(label8);
        label8.setBounds(390, 220, 230, 25);

        docimil.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(docimil);
        docimil.setBounds(390, 260, 210, 40);

        label10.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label10.setForeground(new java.awt.Color(102, 204, 255));
        label10.setText("Telephoone  :");
        ModifierInfosEtudiant.add(label10);
        label10.setBounds(390, 30, 230, 25);

        tel.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(tel);
        tel.setBounds(390, 60, 210, 40);

        label11.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label11.setForeground(new java.awt.Color(102, 204, 255));
        label11.setText("Prenom  :");
        ModifierInfosEtudiant.add(label11);
        label11.setBounds(40, 30, 230, 25);

        label12.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label12.setForeground(new java.awt.Color(102, 204, 255));
        label12.setText("Date De Naissance  :");
        ModifierInfosEtudiant.add(label12);
        label12.setBounds(40, 220, 230, 20);

        pnom.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(pnom);
        pnom.setBounds(40, 60, 210, 40);

        datenais.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(datenais);
        datenais.setBounds(40, 250, 210, 40);

        label22.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label22.setForeground(new java.awt.Color(102, 204, 255));
        label22.setText("Nom  :");
        ModifierInfosEtudiant.add(label22);
        label22.setBounds(40, 130, 230, 25);

        nomuetu.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        ModifierInfosEtudiant.add(nomuetu);
        nomuetu.setBounds(40, 160, 210, 40);

        errorLabel1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorLabel1.setForeground(new java.awt.Color(255, 51, 51));
        ModifierInfosEtudiant.add(errorLabel1);
        errorLabel1.setBounds(140, 360, 480, 20);

        etudiant.add(ModifierInfosEtudiant);
        ModifierInfosEtudiant.setBounds(250, 50, 680, 380);

        ModifierCursusUniversite.setBackground(new java.awt.Color(242, 242, 242));
        ModifierCursusUniversite.setVisible(false);
        ModifierCursusUniversite.setLayout(null);

        label13.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label13.setForeground(new java.awt.Color(102, 204, 255));
        label13.setText("Annee De Debut :");
        ModifierCursusUniversite.add(label13);
        label13.setBounds(30, 110, 210, 30);

        label14.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label14.setForeground(new java.awt.Color(102, 204, 255));
        label14.setText("Anne De Fin :");
        ModifierCursusUniversite.add(label14);
        label14.setBounds(480, 100, 210, 30);

        anDebut.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        anDebut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anDebutActionPerformed(evt);
            }
        });
        ModifierCursusUniversite.add(anDebut);
        anDebut.setBounds(30, 150, 230, 50);

        anFin.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        anFin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anFinActionPerformed(evt);
            }
        });
        ModifierCursusUniversite.add(anFin);
        anFin.setBounds(470, 150, 230, 50);

        buttonModifirCursus.setBackground(new java.awt.Color(102, 204, 255));
        buttonModifirCursus.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonModifirCursus.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonModifirCursus.setForeground(new java.awt.Color(255, 255, 255));
        buttonModifirCursus.setLabel("Modifier");
        buttonModifirCursus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonModifirCursusActionPerformed(evt);
            }
        });
        ModifierCursusUniversite.add(buttonModifirCursus);
        buttonModifirCursus.setBounds(220, 220, 270, 40);

        errorLabel2.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorLabel2.setForeground(new java.awt.Color(255, 51, 51));
        ModifierCursusUniversite.add(errorLabel2);
        errorLabel2.setBounds(170, 290, 340, 50);

        etudiant.add(ModifierCursusUniversite);
        ModifierCursusUniversite.setBounds(250, 50, 680, 380);

        ModifierParcoursPro.setBackground(new java.awt.Color(242, 242, 242));
        ModifierParcoursPro.setVisible(false);
        ModifierParcoursPro.setLayout(null);

        label15.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label15.setForeground(new java.awt.Color(102, 204, 255));
        label15.setText("Entreprise :");
        ModifierParcoursPro.add(label15);
        label15.setBounds(410, 140, 210, 30);

        anneFinPro.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        anneFinPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneFinProActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(anneFinPro);
        anneFinPro.setBounds(40, 180, 220, 40);

        contrat.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        contrat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contratActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(contrat);
        contrat.setBounds(410, 70, 220, 40);

        entreprise.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        entreprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entrepriseActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(entreprise);
        entreprise.setBounds(410, 180, 220, 40);

        posteOccupe.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        posteOccupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posteOccupeActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(posteOccupe);
        posteOccupe.setBounds(40, 290, 220, 40);

        anneeDebutPro.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        anneeDebutPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anneeDebutProActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(anneeDebutPro);
        anneeDebutPro.setBounds(40, 80, 220, 40);

        boutonParcoursPro.setBackground(new java.awt.Color(102, 204, 255));
        boutonParcoursPro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        boutonParcoursPro.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        boutonParcoursPro.setForeground(new java.awt.Color(255, 255, 255));
        boutonParcoursPro.setLabel("Ajouter");
        boutonParcoursPro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boutonParcoursProActionPerformed(evt);
            }
        });
        ModifierParcoursPro.add(boutonParcoursPro);
        boutonParcoursPro.setBounds(410, 280, 230, 40);

        label16.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label16.setForeground(new java.awt.Color(102, 204, 255));
        label16.setText("Annee De Debut :");
        ModifierParcoursPro.add(label16);
        label16.setBounds(40, 40, 210, 30);

        label17.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label17.setForeground(new java.awt.Color(102, 204, 255));
        label17.setText("Annee De Fin :");
        ModifierParcoursPro.add(label17);
        label17.setBounds(40, 140, 210, 30);

        label18.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label18.setForeground(new java.awt.Color(102, 204, 255));
        label18.setText("Poste Occupe");
        ModifierParcoursPro.add(label18);
        label18.setBounds(40, 250, 210, 30);

        label19.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label19.setForeground(new java.awt.Color(102, 204, 255));
        label19.setText("Contrat :");
        ModifierParcoursPro.add(label19);
        label19.setBounds(410, 30, 210, 30);

        etudiant.add(ModifierParcoursPro);
        ModifierParcoursPro.setBounds(240, 50, 700, 380);

        ModifierInscriptionMaster.setBackground(new java.awt.Color(242, 242, 242));
        ModifierInscriptionMaster.setVisible(false);
        ModifierInscriptionMaster.setLayout(null);

        label20.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label20.setForeground(new java.awt.Color(102, 204, 255));
        label20.setText("Universite :");
        ModifierInscriptionMaster.add(label20);
        label20.setBounds(410, 70, 210, 30);

        nMaster.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        nMaster.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nMasterActionPerformed(evt);
            }
        });
        ModifierInscriptionMaster.add(nMaster);
        nMaster.setBounds(50, 130, 220, 40);

        universite.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        universite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                universiteActionPerformed(evt);
            }
        });
        ModifierInscriptionMaster.add(universite);
        universite.setBounds(410, 120, 220, 40);

        label21.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        label21.setForeground(new java.awt.Color(102, 204, 255));
        label21.setText("Nouveau Master :");
        ModifierInscriptionMaster.add(label21);
        label21.setBounds(50, 80, 210, 30);

        button10.setBackground(new java.awt.Color(102, 204, 255));
        button10.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button10.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        button10.setForeground(new java.awt.Color(255, 255, 255));
        button10.setLabel("Ajouter");
        button10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button10ActionPerformed(evt);
            }
        });
        ModifierInscriptionMaster.add(button10);
        button10.setBounds(230, 230, 230, 40);

        errorLabel3.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorLabel3.setForeground(new java.awt.Color(255, 51, 51));
        ModifierInscriptionMaster.add(errorLabel3);
        errorLabel3.setBounds(160, 310, 420, 30);

        etudiant.add(ModifierInscriptionMaster);
        ModifierInscriptionMaster.setBounds(240, 50, 700, 380);

        Amis.setBackground(new java.awt.Color(242, 242, 242));
        Amis.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Amis.setForeground(new java.awt.Color(102, 204, 255));
        Amis.setVisible(false);
        Amis.setLayout(null);

        label1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        label1.setForeground(new java.awt.Color(102, 204, 255));
        label1.setText(" vos amis (es)");
        Amis.add(label1);
        label1.setBounds(210, 30, 510, 30);

        afficheAmis.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(afficheAmis);

        Amis.add(jScrollPane4);
        jScrollPane4.setBounds(50, 130, 810, 110);

        etudiant.add(Amis);
        Amis.setBounds(10, 60, 930, 470);

        getContentPane().add(etudiant);
        etudiant.setBounds(0, 0, 960, 890);

        authentification.setBackground(new java.awt.Color(248, 248, 243));
        authentification.setMinimumSize(new java.awt.Dimension(950, 500));
        authentification.setLayout(null);

        infos.setBackground(new java.awt.Color(248, 248, 243));
        infos.setMinimumSize(new java.awt.Dimension(800, 500));
        infos.setLayout(null);

        label2.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label2.setForeground(new java.awt.Color(102, 204, 255));
        label2.setText("Code Permenant");
        infos.add(label2);
        label2.setBounds(310, 50, 200, 30);

        textField1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        textField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                textField1ActionPerformed(evt);
            }
        });
        infos.add(textField1);
        textField1.setBounds(310, 90, 250, 40);

        jPasswordField1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPasswordField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordField1ActionPerformed(evt);
            }
        });
        infos.add(jPasswordField1);
        jPasswordField1.setBounds(310, 170, 250, 40);

        lienRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lienRegister.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        lienRegister.setForeground(new java.awt.Color(102, 204, 255));
        lienRegister.setText("S'inscrire si vous etes nouveau");
        lienRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lienRegisterMouseClicked(evt);
            }
        });
        infos.add(lienRegister);
        lienRegister.setBounds(300, 370, 360, 40);

        button2.setBackground(new java.awt.Color(102, 204, 255));
        button2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button2.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        button2.setForeground(new java.awt.Color(255, 255, 255));
        button2.setLabel("Se connecter");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });
        infos.add(button2);
        button2.setBounds(310, 310, 250, 40);

        label4.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label4.setForeground(new java.awt.Color(102, 204, 255));
        label4.setText("Mot de pass :");
        infos.add(label4);
        label4.setBounds(310, 130, 260, 40);

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "etudiant", "personnel", "admin" }));
        jComboBox1.setAutoscrolls(true);
        jComboBox1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jComboBox1.setName(""); // NOI18N
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        infos.add(jComboBox1);
        jComboBox1.setBounds(310, 250, 250, 40);

        label3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label3.setForeground(new java.awt.Color(102, 204, 255));
        label3.setText("Type d'utilisateur :");
        infos.add(label3);
        label3.setBounds(310, 210, 230, 40);

        errorLabel.setAlignment(java.awt.Label.CENTER);
        errorLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        errorLabel.setForeground(new java.awt.Color(255, 51, 51));
        infos.add(errorLabel);
        errorLabel.setBounds(30, 420, 820, 30);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 204, 255));
        jLabel1.setText("Veillez renseigner vos infos de connexion");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 5, true));
        infos.add(jLabel1);
        jLabel1.setBounds(210, 0, 490, 50);

        authentification.add(infos);
        infos.setBounds(40, 0, 850, 510);

        getContentPane().add(authentification);
        authentification.setBounds(0, 0, 950, 470);

        personnel.setBackground(new java.awt.Color(248, 248, 243));
        personnel.setMinimumSize(new java.awt.Dimension(950, 500));
        personnel.setVisible(false);
        personnel.setLayout(null);

        buttonDeconnexionPersonnel.setBackground(new java.awt.Color(255, 255, 255));
        buttonDeconnexionPersonnel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonDeconnexionPersonnel.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonDeconnexionPersonnel.setForeground(new java.awt.Color(102, 204, 255));
        buttonDeconnexionPersonnel.setLabel("Deconnexion");
        buttonDeconnexionPersonnel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonDeconnexionPersonnelActionPerformed(evt);
            }
        });
        personnel.add(buttonDeconnexionPersonnel);
        buttonDeconnexionPersonnel.setBounds(780, 20, 140, 30);

        buttonVerificatioDiplome.setBackground(new java.awt.Color(255, 255, 255));
        buttonVerificatioDiplome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonVerificatioDiplome.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonVerificatioDiplome.setForeground(new java.awt.Color(102, 204, 255));
        buttonVerificatioDiplome.setLabel("Verification Des Diplomes");
        buttonVerificatioDiplome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerificatioDiplomeActionPerformed(evt);
            }
        });
        personnel.add(buttonVerificatioDiplome);
        buttonVerificatioDiplome.setBounds(210, 20, 210, 30);

        buttonGestionDiplome.setBackground(new java.awt.Color(255, 255, 255));
        buttonGestionDiplome.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonGestionDiplome.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonGestionDiplome.setForeground(new java.awt.Color(102, 204, 255));
        buttonGestionDiplome.setLabel("Gestion Des Diplomes");
        buttonGestionDiplome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGestionDiplomeActionPerformed(evt);
            }
        });
        personnel.add(buttonGestionDiplome);
        buttonGestionDiplome.setBounds(10, 20, 190, 30);

        buttonExploitationDonnees.setBackground(new java.awt.Color(255, 255, 255));
        buttonExploitationDonnees.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonExploitationDonnees.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonExploitationDonnees.setForeground(new java.awt.Color(102, 204, 255));
        buttonExploitationDonnees.setLabel("Exploitation Des Donnees");
        buttonExploitationDonnees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonExploitationDonneesActionPerformed(evt);
            }
        });
        personnel.add(buttonExploitationDonnees);
        buttonExploitationDonnees.setBounds(440, 20, 210, 30);

        afficheGestionDesDiplomes.setVisible(false);
        afficheGestionDesDiplomes.setLayout(null);

        tableGestionDiplome.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableGestionDiplome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableGestionDiplomeMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(tableGestionDiplome);

        afficheGestionDesDiplomes.add(jScrollPane6);
        jScrollPane6.setBounds(0, 10, 920, 360);

        personnel.add(afficheGestionDesDiplomes);
        afficheGestionDesDiplomes.setBounds(10, 80, 920, 380);

        plusInfos.setVisible(false);
        plusInfos.setLayout(null);

        infosInscriptionMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane8.setViewportView(infosInscriptionMaster);

        plusInfos.add(jScrollPane8);
        jScrollPane8.setBounds(400, 280, 240, 50);

        InfostableCursus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane10.setViewportView(InfostableCursus);

        plusInfos.add(jScrollPane10);
        jScrollPane10.setBounds(340, 50, 280, 50);

        infosParcoursPro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane11.setViewportView(infosParcoursPro);

        plusInfos.add(jScrollPane11);
        jScrollPane11.setBounds(90, 170, 780, 50);

        label5.setAlignment(java.awt.Label.CENTER);
        label5.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label5.setText("Cursus Universitaire");
        plusInfos.add(label5);
        label5.setBounds(150, 20, 630, 23);

        label6.setAlignment(java.awt.Label.CENTER);
        label6.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label6.setText("Parcours Professionnel");
        plusInfos.add(label6);
        label6.setBounds(130, 130, 680, 23);

        label9.setAlignment(java.awt.Label.CENTER);
        label9.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        label9.setText("Inscription Master :");
        plusInfos.add(label9);
        label9.setBounds(140, 240, 670, 23);

        personnel.add(plusInfos);
        plusInfos.setBounds(10, 70, 920, 380);

        verificationDiplomes.setBackground(new java.awt.Color(242, 242, 242));
        verificationDiplomes.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        verificationDiplomes.setForeground(new java.awt.Color(102, 204, 255));
        verificationDiplomes.setVisible(false);
        verificationDiplomes.setLayout(null);

        label23.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        label23.setForeground(new java.awt.Color(102, 204, 255));
        label23.setText("Veuillez saisir le code permanent pour verifier");
        verificationDiplomes.add(label23);
        label23.setBounds(390, 10, 470, 30);
        verificationDiplomes.add(codePermanentVerification);
        codePermanentVerification.setBounds(499, 60, 160, 30);

        buttonVerificationDiplomes.setBackground(new java.awt.Color(255, 255, 255));
        buttonVerificationDiplomes.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonVerificationDiplomes.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonVerificationDiplomes.setForeground(new java.awt.Color(102, 204, 255));
        buttonVerificationDiplomes.setLabel("Verifier");
        buttonVerificationDiplomes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonVerificationDiplomesActionPerformed(evt);
            }
        });
        verificationDiplomes.add(buttonVerificationDiplomes);
        buttonVerificationDiplomes.setBounds(690, 60, 140, 30);

        labelVerifier.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelVerifier.setText("cet etudiant n'est pas diplome ");
        labelVerifier.setVisible(false);
        verificationDiplomes.add(labelVerifier);
        labelVerifier.setBounds(30, 100, 460, 23);

        panel1.setVisible(false);
        panel1.setLayout(null);

        tableauVerification.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tableauVerification);

        panel1.add(jScrollPane7);
        jScrollPane7.setBounds(10, 30, 870, 60);

        TableCursus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane9.setViewportView(TableCursus);

        panel1.add(jScrollPane9);
        jScrollPane9.setBounds(110, 120, 210, 50);

        verificationDiplomes.add(panel1);
        panel1.setBounds(10, 150, 890, 190);

        personnel.add(verificationDiplomes);
        verificationDiplomes.setBounds(10, 100, 920, 350);

        ExploitationDonnees.setVisible(false);
        ExploitationDonnees.setLayout(null);

        nomreContrat.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        nomreContrat.setForeground(new java.awt.Color(102, 204, 255));
        nomreContrat.setText("label24");
        ExploitationDonnees.add(nomreContrat);
        nomreContrat.setBounds(10, 50, 560, 20);

        nombreInscriptionMaster.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        nombreInscriptionMaster.setForeground(new java.awt.Color(102, 204, 255));
        nombreInscriptionMaster.setText("label24");
        ExploitationDonnees.add(nombreInscriptionMaster);
        nombreInscriptionMaster.setBounds(10, 180, 590, 28);

        nombreEtudiants.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        nombreEtudiants.setForeground(new java.awt.Color(102, 204, 255));
        nombreEtudiants.setText("label24");
        ExploitationDonnees.add(nombreEtudiants);
        nombreEtudiants.setBounds(10, 310, 610, 28);

        tableauparcourPro.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane12.setViewportView(tableauparcourPro);

        ExploitationDonnees.add(jScrollPane12);
        jScrollPane12.setBounds(640, 30, 270, 90);

        inscriptionMaster.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane13.setViewportView(inscriptionMaster);

        ExploitationDonnees.add(jScrollPane13);
        jScrollPane13.setBounds(640, 150, 270, 100);

        personnel.add(ExploitationDonnees);
        ExploitationDonnees.setBounds(10, 70, 920, 380);

        getContentPane().add(personnel);
        personnel.setBounds(0, 0, 950, 500);

        admin.setBackground(new java.awt.Color(248, 248, 243));
        admin.setVisible(false);
        admin.setLayout(null);

        buttonGestionDiplome1.setBackground(new java.awt.Color(255, 255, 255));
        buttonGestionDiplome1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonGestionDiplome1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonGestionDiplome1.setForeground(new java.awt.Color(102, 204, 255));
        buttonGestionDiplome1.setLabel("Suprimer Utilisateurs");
        buttonGestionDiplome1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGestionDiplome1ActionPerformed(evt);
            }
        });
        admin.add(buttonGestionDiplome1);
        buttonGestionDiplome1.setBounds(340, 10, 220, 30);

        buttonGestionDiplome2.setBackground(new java.awt.Color(255, 255, 255));
        buttonGestionDiplome2.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonGestionDiplome2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonGestionDiplome2.setForeground(new java.awt.Color(102, 204, 255));
        buttonGestionDiplome2.setLabel("Deconnexion");
        buttonGestionDiplome2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGestionDiplome2ActionPerformed(evt);
            }
        });
        admin.add(buttonGestionDiplome2);
        buttonGestionDiplome2.setBounds(820, 10, 120, 30);

        buttonGestionUtilisateurs.setBackground(new java.awt.Color(255, 255, 255));
        buttonGestionUtilisateurs.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonGestionUtilisateurs.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonGestionUtilisateurs.setForeground(new java.awt.Color(102, 204, 255));
        buttonGestionUtilisateurs.setLabel("Afficheage Des Utilisateurs");
        buttonGestionUtilisateurs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonGestionUtilisateursActionPerformed(evt);
            }
        });
        admin.add(buttonGestionUtilisateurs);
        buttonGestionUtilisateurs.setBounds(30, 10, 240, 30);

        affichageUtilisateurs.setVisible(false);
        affichageUtilisateurs.setLayout(null);

        tablePersonnel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane14.setViewportView(tablePersonnel);

        affichageUtilisateurs.add(jScrollPane14);
        jScrollPane14.setBounds(470, 20, 452, 280);

        tableEtudiant.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane15.setViewportView(tableEtudiant);

        affichageUtilisateurs.add(jScrollPane15);
        jScrollPane15.setBounds(10, 20, 452, 280);

        admin.add(affichageUtilisateurs);
        affichageUtilisateurs.setBounds(20, 90, 930, 410);

        SupprimerUtilisateur.setBackground(new java.awt.Color(242, 242, 242));
        SupprimerUtilisateur.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        SupprimerUtilisateur.setForeground(new java.awt.Color(102, 204, 255));
        SupprimerUtilisateur.setVisible(false);
        SupprimerUtilisateur.setLayout(null);

        label24.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        label24.setForeground(new java.awt.Color(102, 204, 255));
        label24.setText("Veuillez saisir le code permanent pour supprimer");
        SupprimerUtilisateur.add(label24);
        label24.setBounds(440, 10, 470, 30);
        SupprimerUtilisateur.add(codePermanentSupprimer);
        codePermanentSupprimer.setBounds(499, 60, 160, 30);

        buttonSupprimmerUtilisateur.setBackground(new java.awt.Color(255, 255, 255));
        buttonSupprimmerUtilisateur.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        buttonSupprimmerUtilisateur.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        buttonSupprimmerUtilisateur.setForeground(new java.awt.Color(102, 204, 255));
        buttonSupprimmerUtilisateur.setLabel("Supprimer");
        buttonSupprimmerUtilisateur.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSupprimmerUtilisateurActionPerformed(evt);
            }
        });
        SupprimerUtilisateur.add(buttonSupprimmerUtilisateur);
        buttonSupprimmerUtilisateur.setBounds(690, 60, 140, 30);

        labelVerifier1.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        labelVerifier1.setText("cet etudiant n'est pas diplome ");
        labelVerifier1.setVisible(false);
        SupprimerUtilisateur.add(labelVerifier1);
        labelVerifier1.setBounds(30, 100, 460, 23);

        panel2.setVisible(false);
        panel2.setLayout(null);

        tableauVerification1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane16.setViewportView(tableauVerification1);

        panel2.add(jScrollPane16);
        jScrollPane16.setBounds(10, 30, 870, 60);

        TableCursus1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane17.setViewportView(TableCursus1);

        panel2.add(jScrollPane17);
        jScrollPane17.setBounds(110, 120, 210, 50);

        SupprimerUtilisateur.add(panel2);
        panel2.setBounds(10, 150, 890, 190);

        admin.add(SupprimerUtilisateur);
        SupprimerUtilisateur.setBounds(30, 90, 920, 350);

        getContentPane().add(admin);
        admin.setBounds(-10, -10, 980, 520);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void InscriptionMasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InscriptionMasterActionPerformed
        // TODO add your handling code here:
        ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(true);
        MonProfil.setVisible(false);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(true);
        ModifierParcoursPro.setVisible(false);
        Amis.setVisible(false);
    }//GEN-LAST:event_InscriptionMasterActionPerformed

    private void InformationEtudiantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformationEtudiantActionPerformed
        // TODO add your handling code here:
         
        ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(true);
        MonProfil.setVisible(false);
        ModifierInfosEtudiant.setVisible(true);
       ancienifosEtudiant();
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(false);
        Amis.setVisible(false);
    }//GEN-LAST:event_InformationEtudiantActionPerformed

    private void CursusUniversitaireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CursusUniversitaireActionPerformed
        // TODO add your handling code here:
        ModifierCursusUniversite.setVisible(true);
        MenuModifierProfil.setVisible(true);
        MonProfil.setVisible(false);
         ancieninfosCursus();
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(false);
        Amis.setVisible(false);
    }//GEN-LAST:event_CursusUniversitaireActionPerformed

    private void button6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button6ActionPerformed
        // TODO add your handling code here:
        ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(true);
        MonProfil.setVisible(false);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
    }//GEN-LAST:event_button6ActionPerformed

    private void buttonInfosEtudiantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonInfosEtudiantActionPerformed
        // TODO add your handling code he
         modifierEtudiant();
         ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
            afficheifosetudaiant.setVisible(false);
            afficheCursus.setVisible(false);
            afficheInscriptionMaster.setVisible(false);
             afficheParcourPro.setVisible(false);
    }//GEN-LAST:event_buttonInfosEtudiantActionPerformed

    private void anDebutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anDebutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anDebutActionPerformed

    private void anFinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anFinActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anFinActionPerformed

    private void buttonModifirCursusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModifirCursusActionPerformed
        // TODO add your handling code here:
        ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
             afficheifosetudaiant.setVisible(false);
             afficheCursus.setVisible(false);
             afficheInscriptionMaster.setVisible(false);
              afficheParcourPro.setVisible(false);
       modifierCursus();
    }//GEN-LAST:event_buttonModifirCursusActionPerformed

    private void anneFinProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneFinProActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anneFinProActionPerformed

    private void contratActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contratActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contratActionPerformed

    private void entrepriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entrepriseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entrepriseActionPerformed

    private void posteOccupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posteOccupeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_posteOccupeActionPerformed

    private void anneeDebutProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anneeDebutProActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_anneeDebutProActionPerformed

    private void boutonParcoursProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boutonParcoursProActionPerformed
        // TODO add your handling code here:
             ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
             afficheifosetudaiant.setVisible(false);
             afficheCursus.setVisible(false);
             afficheInscriptionMaster.setVisible(false);
              afficheParcourPro.setVisible(false);
          ajoutparcoursProfessionnel();
    }//GEN-LAST:event_boutonParcoursProActionPerformed

    private void nMasterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nMasterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nMasterActionPerformed

    private void universiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_universiteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_universiteActionPerformed

    private void button10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button10ActionPerformed
           
        ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
             afficheifosetudaiant.setVisible(false);
             afficheCursus.setVisible(false);
             afficheInscriptionMaster.setVisible(false);
              afficheParcourPro.setVisible(false);
        inscriptionMaster();        // TODO add your handling code here:
    }//GEN-LAST:event_button10ActionPerformed

    private void buttonDeconnexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeconnexionActionPerformed
        // TODO add your handling code here:
     deconnexion();
    
    }//GEN-LAST:event_buttonDeconnexionActionPerformed

    private void buttonMonProfil1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMonProfil1ActionPerformed
        // TODO add your handling code here:
             afficheParcourPro.setVisible(false);
            afficheInscriptionMaster.setVisible(false);
            afficheCursus.setVisible(false);
            afficheifosetudaiant.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        MenuModifierProfil.setVisible(false);
        ModifierCursusUniversite.setVisible(false);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(false);
        Amis.setVisible(false);

    }//GEN-LAST:event_buttonMonProfil1ActionPerformed

    private void buttonModifierProfil1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonModifierProfil1ActionPerformed
        // TODO add your handling code here:
        
        MonProfil.setVisible(false);
        MenuModifierProfil.setVisible(true);
        ModifierCursusUniversite.setVisible(false);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(false);
        Amis.setVisible(false);
    }//GEN-LAST:event_buttonModifierProfil1ActionPerformed

    private void buttonAmis1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAmis1ActionPerformed
        // TODO add your handling code here:
      
         MenuModifierProfil.setVisible(false);
     MonProfil.setVisible(false);
  MenuModifierProfil.setVisible(false);
   ModifierCursusUniversite.setVisible(false);
   ModifierInfosEtudiant.setVisible(false);
    ModifierInscriptionMaster.setVisible(false);
    ModifierParcoursPro.setVisible(false);
   Amis.setVisible(true);
   afficheAmis();
    }//GEN-LAST:event_buttonAmis1ActionPerformed

    private void textField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_textField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_textField1ActionPerformed

    private void lienRegisterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lienRegisterMouseClicked
        // TODO add your handling code here:

        Register loginPage = new Register();
        loginPage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_lienRegisterMouseClicked

    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed
        // TODO add your handling code here:

        authenticateEtudiants() ;

    }//GEN-LAST:event_button2ActionPerformed

    private void InformationEtudiant1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InformationEtudiant1ActionPerformed
        // TODO add your handling code here:
         afficheParcourPro.setVisible(false);
        afficheInscriptionMaster.setVisible(false);
        afficheCursus.setVisible(false);
        afficheifosetudaiant.setVisible(true);
        AffichageEtudiant() ;
    }//GEN-LAST:event_InformationEtudiant1ActionPerformed

    private void CursusUniversitaire1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CursusUniversitaire1ActionPerformed
        // TODO add your handling code here:
        afficheInscriptionMaster.setVisible(false);
        afficheifosetudaiant.setVisible(false);
        afficheCursus.setVisible(true);
         afficheParcourPro.setVisible(false);
        AffichageCursusUniversitaire();
    }//GEN-LAST:event_CursusUniversitaire1ActionPerformed

    private void buttonParcoursProActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonParcoursProActionPerformed
        // TODO add your handling code here:
      
        afficheifosetudaiant.setVisible(false);
        afficheCursus.setVisible(false);
        afficheInscriptionMaster.setVisible(false);
        afficheParcourPro.setVisible(true);
        AffichageParcoursPro();
    }//GEN-LAST:event_buttonParcoursProActionPerformed

    private void InscriptionMaster1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InscriptionMaster1ActionPerformed
        // TODO add your handling code here:
        afficheParcourPro.setVisible(false);
          afficheifosetudaiant.setVisible(false);
        afficheCursus.setVisible(false);
        afficheInscriptionMaster.setVisible(true);
        AffichageInscripMaster();
        
    }//GEN-LAST:event_InscriptionMaster1ActionPerformed

    private void jPasswordField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jPasswordField1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void tableinfosetudiantComponentRemoved(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_tableinfosetudiantComponentRemoved
        // TODO add your handling code here:
        
    }//GEN-LAST:event_tableinfosetudiantComponentRemoved

    private void tableInscriptionMasterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableInscriptionMasterMouseClicked
        // TODO add your handling code here:
        
          int row = tableInscriptionMaster.rowAtPoint(evt.getPoint());
                int column = tableInscriptionMaster.columnAtPoint(evt.getPoint());
                if (row >= 0 && column == 2) { // Vérifie si le clic est sur la colonne "Modifier"
                    supprimerInscriptionMaster(row);}
    }//GEN-LAST:event_tableInscriptionMasterMouseClicked

    private void tableParcourProMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableParcourProMouseClicked
        // TODO add your handling code here:
        
        int row = tableParcourPro.rowAtPoint(evt.getPoint());
                int column = tableParcourPro.columnAtPoint(evt.getPoint());
                if (row >= 0 && column == 5) { // Vérifie si le clic est sur la colonne "Modifier"
                    supprimerParcoursPro(row);}
    }//GEN-LAST:event_tableParcourProMouseClicked

    private void buttonDeconnexionPersonnelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonDeconnexionPersonnelActionPerformed
        // TODO add your handling code here
        deconnexion();
    }//GEN-LAST:event_buttonDeconnexionPersonnelActionPerformed

    private void buttonVerificatioDiplomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerificatioDiplomeActionPerformed
        // TODO add your handling code here:
        verificationDiplomes.setVisible(true);
         afficheGestionDesDiplomes.setVisible(false);
         plusInfos.setVisible(false);
         ExploitationDonnees.setVisible(false);
    }//GEN-LAST:event_buttonVerificatioDiplomeActionPerformed

    private void buttonGestionDiplomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGestionDiplomeActionPerformed
        // TODO add your handling code here:
        verificationDiplomes.setVisible(false);
        plusInfos.setVisible(false);        
        afficheGestionDesDiplomes.setVisible(true);
        ExploitationDonnees.setVisible(false);
        gestionDesDiplomes();
    }//GEN-LAST:event_buttonGestionDiplomeActionPerformed

    private void buttonExploitationDonneesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonExploitationDonneesActionPerformed
        AffichageParTypeContrat();        // TODO add your handling code here:
        verificationDiplomes.setVisible(false);
        plusInfos.setVisible(false);        
        afficheGestionDesDiplomes.setVisible(false);
        ExploitationDonnees.setVisible(true);
    }//GEN-LAST:event_buttonExploitationDonneesActionPerformed

    private void tableGestionDiplomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableGestionDiplomeMouseClicked
        // TODO add your handling code here:
        int row = tableGestionDiplome.rowAtPoint(evt.getPoint());
                int column = tableGestionDiplome.columnAtPoint(evt.getPoint());
                if (row >= 0 && column == 7) { // Vérifie si le clic est sur la colonne "Modifier"
                    InfosPlusgestionDesDiplomes(row);}
            afficheGestionDesDiplomes.setVisible(false);
        plusInfos.setVisible(true);
         verificationDiplomes.setVisible(false);

    }//GEN-LAST:event_tableGestionDiplomeMouseClicked

    private void buttonVerificationDiplomesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonVerificationDiplomesActionPerformed
        // TODO add your handling code here:
         verificationDiplome();
         affichageUtilisateurs.setVisible(true);
         
    }//GEN-LAST:event_buttonVerificationDiplomesActionPerformed

    private void buttonGestionUtilisateursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGestionUtilisateursActionPerformed
        // TODO add your handling code here:
       
         SupprimerUtilisateur.setVisible(false);
         affichageUtilisateurs.setVisible(true);
          AffichageUtilisateurs();
    }//GEN-LAST:event_buttonGestionUtilisateursActionPerformed

    private void buttonGestionDiplome2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGestionDiplome2ActionPerformed
        // TODO add your handling code here:
        deconnexion();
    }//GEN-LAST:event_buttonGestionDiplome2ActionPerformed

    private void buttonGestionDiplome1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonGestionDiplome1ActionPerformed
        // TODO add your handling code here:
         affichageUtilisateurs.setVisible(false);
         SupprimerUtilisateur.setVisible(true);
    }//GEN-LAST:event_buttonGestionDiplome1ActionPerformed

    private void buttonSupprimmerUtilisateurActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSupprimmerUtilisateurActionPerformed
        // TODO add your handling code here:
       supprimerUtilisateur();
       codePermanentSupprimer.setText("");
        
    }//GEN-LAST:event_buttonSupprimmerUtilisateurActionPerformed
    
    
    public boolean etudiantExiste(String codePermanent) {
        
        Connection connection = null;
    PreparedStatement statement = null;
    ResultSet resultSet = null;
    boolean existe = false;
        try{
        int code =Integer.parseInt(codePermanent);
    

    try {
        connection = connecterDB.connecterDB(); //    Utilisez votre méthode de connexion à la base de données

        String query = "SELECT * FROM etudiants WHERE codePermanent = ?";
        statement = connection.prepareStatement(query);
        statement.setInt(1, code);
        resultSet = statement.executeQuery();

        // Vérifier si un résultat est retourné
        existe = resultSet.next();
    } catch (SQLException e) {
        e.printStackTrace();
    } finally {
        // Fermeture des ressources
        if (resultSet != null) {
            try {
                resultSet.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (statement != null) {
            try {
                statement.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if (connection != null) {
            try {
                connection.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }
    }catch(Exception e){
    }
    return existe;
    }
   
    
    public void deconnexion(){

        this.dispose();
    AcceuilEtudiant log= new AcceuilEtudiant();
    log.setVisible(true);
}
//    -----------------------------------------LES AUTHENTIFICATIONS ----------------------------------------------------
    
     private void authenticateEtudiants() {
      try{
      username =Integer.parseInt( textField1.getText());
    String password = new String(jPasswordField1.getPassword());
    String typeUtilisateur = (String) jComboBox1.getSelectedItem();
    
     if (username==0 || password.isEmpty() ) {
            setErrorLabel("Veuillez remplir tous les champs.");}
           
        else{
         Connection    connection = connecterDB.connecterDB();
        if (connection != null) {
            try {
                String queryConnexion = "SELECT * FROM utilisateurs WHERE id = ? AND motDePasse = ? AND type_utilisateur = ?  ";
                try (PreparedStatement preparedStatement = connection.prepareStatement(queryConnexion)) {
                    preparedStatement.setInt(1, username);
                    preparedStatement.setString(2, password); 
                    preparedStatement.setString(3, typeUtilisateur); 
                    ResultSet resultSet = preparedStatement.executeQuery();

                    if (resultSet.next()) {
                        if (typeUtilisateur.equals("etudiant")){
                          // Ouvrir la fenêtre Infos
                            etudiant.setVisible(true);
                            authentification.setVisible(false);
                            personnel.setVisible(false);
                        }
                        else if (typeUtilisateur.equals("personnel")){
                          // Ouvrir la fenêtre Infos
                            etudiant.setVisible(false);
                            authentification.setVisible(false);
                            personnel.setVisible(true);
                        }else if (typeUtilisateur.equals("admin")){
//                 Ouvrir la fenêtre Infos
//                            etudiant.setVisible(true);
//                            infos.setVisible(false);
                        }
                        
                    } else {
                        setErrorLabel("Nom d'utilisateur ou mot de passe incorrect ou type utilisateur.");
                    }
                }
            } catch (SQLException ex) {
                
                
                setErrorLabel("Erreur lors de la connexion");
               
            } finally {
                connecterDB.fermerConnexion(connection);
            }
        }
     
        
        }
        
       }catch(Exception e){
       setErrorLabel("entrer des valeurs valide");
       }
        
    }
// --------------------------------------------------ADMIN--------------------------------------------------------------
     
     
     public void supprimerUtilisateur() {
    // Récupérer les données de la ligne sélectionnée
   String code= codePermanentSupprimer.getText();
    int codePermanent  =  Integer.parseInt(code);
   
    
    // Afficher une boîte de dialogue de confirmation pour la suppression
    int choix = JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer l'utilisateur" + code, "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
    
    // Si l'utilisateur confirme la suppression
    if (choix == JOptionPane.YES_OPTION) {
        // Code pour supprimer l'inscription master de la base de données
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            // Requête SQL pour supprimer l'inscription master
            String query = "DELETE FROM utilisateurs WHERE id = ? ";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            
            
            // Exécuter la requête de suppression
            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                // Afficher un message de succès
                
      
                JOptionPane.showMessageDialog(null, "L'utilisateur '" + code + "' a été supprimée avec succès !");
                
               
            } else {
                JOptionPane.showMessageDialog(null, "Impossible de trouver l'utilisateur  '" + code  + "'.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de la suppression de l'utilisateur : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Fermer les ressources
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

     
     
     public void AffichageUtilisateurs() {

   
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;

        
        try {
            // Établir la connexion à la base de données
            connection = connecterDB.connecterDB();

            // Requête SQL pour sélectionner les utilisateurs ayant comme type_utilisateur "etudiant"
            String query = "SELECT id, motDePasse FROM utilisateurs WHERE type_utilisateur = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, "personnel");
            resultSet = statement.executeQuery();

            // Créer un modèle de tableau par défaut pour stocker les données
            DefaultTableModel model = new DefaultTableModel();
            tablePersonnel.setModel(model);
            model.addColumn("ID");
            model.addColumn("Mot de passe");
            model.addColumn("Personnel");

            // Remplir le modèle de tableau avec les résultats de la requête SQL
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String motDePasse = resultSet.getString("motDePasse");
                model.addRow(new Object[]{id, motDePasse});
            }

            // Créer un tableau JTable avec le modèle de tableau créé
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermer les ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        try {
            // Établir la connexion à la base de données
            connection = connecterDB.connecterDB();

            // Requête SQL pour sélectionner les utilisateurs ayant comme type_utilisateur "etudiant"
            String query = "SELECT id, motDePasse FROM utilisateurs WHERE type_utilisateur = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, "etudiant");
            resultSet = statement.executeQuery();

            // Créer un modèle de tableau par défaut pour stocker les données
            DefaultTableModel model = new DefaultTableModel();
            tableEtudiant.setModel(model);
            model.addColumn("ID");
            model.addColumn("Mot de passe");
            model.addColumn("Etudiant");

            // Remplir le modèle de tableau avec les résultats de la requête SQL
            while (resultSet.next()) {
                int id = resultSet.getInt("id");
                String motDePasse = resultSet.getString("motDePasse");
                model.addRow(new Object[]{id, motDePasse});
            }

            // Créer un tableau JTable avec le modèle de tableau créé
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermer les ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
     
//     --------------------------------------------Personnel---------------------------------------------
     
     
     public void AffichageParTypeContrat(){
     
     
     
        // Récupérer les données de la base de données et les ajouter au modèle de tableau
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        
        try {
            // Établir la connexion à la base de données
            connection = connecterDB.connecterDB();

            // Requête SQL pour compter le nombre d'inscriptions de master par établissement
            String query = "SELECT etablissement, COUNT(*) AS nombre_inscriptions FROM inscriptionmaster GROUP BY etablissement";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            // Créer un modèle de tableau par défaut pour stocker les données
            DefaultTableModel model = new DefaultTableModel();
            inscriptionMaster.setModel(model);
            model.addColumn("Établissement");
            model.addColumn("Nombre d'inscriptions");

            // Remplir le modèle de tableau avec les résultats de la requête SQL
            while (resultSet.next()) {
                String etablissement = resultSet.getString("etablissement");
                int nombreInscriptions = resultSet.getInt("nombre_inscriptions");
                model.addRow(new Object[]{etablissement, nombreInscriptions});
            }

           
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermer les ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    
        
        
        try {
            
            // Créer un modèle de tableau par défaut
        DefaultTableModel model = new DefaultTableModel();
        tableauparcourPro.setModel(model);
        model.addColumn("Type de Contrat");
        model.addColumn("Nombre ");
            
            connection = connecterDB.connecterDB(); // Établir la connexion à la base de données

            String query = "SELECT typeContrat, COUNT(*) AS count FROM parcoursProfessionnels GROUP BY typeContrat";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            while (resultSet.next()) {
                String typeContrat = resultSet.getString("typeContrat");
                int count = resultSet.getInt("count");
                model.addRow(new Object[]{typeContrat, count});
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }

        
        
        try {
            // Établir la connexion à la base de données
            connection = connecterDB.connecterDB();

            // Requête SQL pour compter le nombre d'inscriptions à des masters
            String query = "SELECT COUNT(*) AS total FROM etudiants";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            // Récupérer le résultat
            int total = 0;
            if (resultSet.next()) {
                total = resultSet.getInt("total");
            }
            
            nombreEtudiants.setVisible(true);
            nombreEtudiants.setText("Le nombre d'etudiant est "+total);
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermer les ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    
        
        
        try {
            // Établir la connexion à la base de données
            connection = connecterDB.connecterDB();

            // Requête SQL pour compter le nombre d'inscriptions à des masters
            String query = "SELECT COUNT(*) AS total FROM inscriptionmaster";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            // Récupérer le résultat
            int total = 0;
            if (resultSet.next()) {
                total = resultSet.getInt("total");
            }
            nombreInscriptionMaster.setVisible(true);
            nombreInscriptionMaster.setText("Le nombre d'etudiant ayant inscrit en master est "+total);
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermer les ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    


        try {
            connection = connecterDB.connecterDB(); // Établir la connexion à la base de données
            String query = "SELECT COUNT(*) AS total FROM parcoursProfessionnels";
            statement = connection.prepareStatement(query);
            resultSet = statement.executeQuery();

            // Récupérer le résultat
            int total = 0;
            if (resultSet.next()) {
                total = resultSet.getInt("total");
            }
            nomreContrat.setVisible(true);
            nomreContrat.setText("Le nombre d'etudiant ayant du travail est "+total);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
     
        }
     }
     
     
     
     public void verificationDiplome(){
     
           
         try{
        // Récupérer les données de l'étudiant avec le codePermanent spécifié
        String code=codePermanentVerification.getText();
        int codePermanent=Integer.parseInt(code);
         if(etudiantExiste(code)){
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            DefaultTableModel model;
     

        model = new DefaultTableModel();
        tableauVerification.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Code Permanent");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Date de Naissance");
        model.addColumn("Adresse");
        model.addColumn("Téléphone");
        model.addColumn("Email");

            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM etudiants WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();

            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("codePermanent"),
                        resultSet.getString("nom"),
                        resultSet.getString("prenom"),
                        resultSet.getString("dateNaissance"),
                        resultSet.getString("adresse"),
                        resultSet.getString("telephone"),
                        resultSet.getString("email")
                };
                model.addRow(rowData);
                tableauVerification.setModel(tableauVerification.getModel());
            }
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
       

        // Récupérer les données de l'étudiant avec le codePermanent spécifié

       
        try {
             DefaultTableModel model;
     

        model = new DefaultTableModel();
        TableCursus.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Année Début");
        model.addColumn("Année Fin");
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM promotions WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("annee_Debut"),
                        resultSet.getString("annee_Fin"),
                        
                        
                };
                model.addRow(rowData);
                TableCursus.setModel(TableCursus.getModel());
            }
             panel1.setVisible(true);
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
        
        
         }else{
             panel1.setVisible(false);
             
             labelVerifier.setVisible(true);
         }
         
         } catch(Exception e){}
         
     }
     
     
     
      public void InfosPlusgestionDesDiplomes(int rowIndex){
          
         
          String code= (String) tableGestionDiplome.getValueAt(rowIndex, 0);
    int codePermanent= Integer.parseInt(code);
    // Afficher une boîte de dialogue de confirmation pour la suppression
    
    // Si l'utilisateur confirme la suppression
   
        // Code pour supprimer l'inscription master de la base de données
        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet=null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données
            
          DefaultTableModel  model = new DefaultTableModel();
        InfostableCursus.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Année Début");
        model.addColumn("Année Fin");
            
            String query = "SELECT * FROM promotions WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("annee_Debut"),
                        resultSet.getString("annee_Fin"),
                        
                        
                };
                model.addRow(rowData);
            }
                InfostableCursus.setModel(InfostableCursus.getModel());
            
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
         

        // Récupérer les données de l'étudiant avec le codePermanent spécifié

        try {
            DefaultTableModel model;

        model = new DefaultTableModel();
        infosParcoursPro.setModel(model);

      
        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Anee Debut");
        model.addColumn("Anee Fin");
        model.addColumn("posteOccupe");
        model.addColumn("typeContrat");
        model.addColumn("entreprise");
        
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM parcoursProfessionnels WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau

            while (resultSet.next()) {
              String[] rowData  = {
                        resultSet.getString("dateDebut"),
                        resultSet.getString("dateFin"),
                        resultSet.getString("posteOccupe"),
                        resultSet.getString("typeContrat"),
                        resultSet.getString("entreprise"),
                        
                
                        
                };
                 model.addRow(rowData); 
                            }
           infosParcoursPro.setModel(infosParcoursPro.getModel());

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
        
        
        // Récupérer les données de l'étudiant avec le codePermanent spécifié

       
        try {
            DefaultTableModel model;
     

             model = new DefaultTableModel();
             infosInscriptionMaster.setModel(model);

      
            // Ajouter les colonnes au modèle de tableau
            model.addColumn("Master");
            model.addColumn("Universite");
            

            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM inscriptionmaster WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau
             
            while (resultSet.next()) {
              String[] rowData  = {
                        resultSet.getString("nomMaster"),
                        resultSet.getString("etablissement"),
                       
                
                        
                };
                 model.addRow(rowData); 
                            }
           infosInscriptionMaster.setModel(infosInscriptionMaster.getModel());

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
        
        
        
        
    }
      
      
      
      
     
     
     
     public void gestionDesDiplomes(){
         
         
         DefaultTableModel model;
     

        model = new DefaultTableModel();
        tableGestionDiplome.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Code Permanent");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Date de Naissance");
        model.addColumn("Adresse");
        model.addColumn("Téléphone");
        model.addColumn("Email");
        model.addColumn("Plus d'infos");

        // Récupérer les données de l'étudiant avec le codePermanent spécifié

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM etudiants ";
            statement = connection.prepareStatement(query);
            
            resultSet = statement.executeQuery();

            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("codePermanent"),
                        resultSet.getString("nom"),
                        resultSet.getString("prenom"),
                        resultSet.getString("dateNaissance"),
                        resultSet.getString("adresse"),
                        resultSet.getString("telephone"),
                        resultSet.getString("email"),
                        "+"
                };
                model.addRow(rowData);
                tableGestionDiplome.setModel(tableGestionDiplome.getModel());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
      
 
         
     
     
     
     
    
    // ----------------------------AFFICHAGE DES AMIS-------------------------------------------
    
   
    public void afficheAmis(){
         
         
         DefaultTableModel model;
     

        model = new DefaultTableModel();
        afficheAmis.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Date de Naissance");
        model.addColumn("Adresse");
        model.addColumn("Téléphone");
        model.addColumn("Email");
        model.addColumn("Plus d'infos");

        // Récupérer les données de l'étudiant avec le codePermanent spécifié

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM etudiants ";
            statement = connection.prepareStatement(query);
            
            resultSet = statement.executeQuery();

            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("nom"),
                        resultSet.getString("prenom"),
                        resultSet.getString("dateNaissance"),
                        resultSet.getString("adresse"),
                        resultSet.getString("telephone"),
                        resultSet.getString("email"),
                        "+"
                };
                model.addRow(rowData);
                afficheAmis.setModel(afficheAmis.getModel());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    private void ancienifosEtudiant(){
    
    
    int codePermanent=username;
        try {
   Connection connection = connecterDB.connecterDB(); // Connexion à la base de données
   
    String query = "SELECT nom, prenom, dateNaissance, adresse, telephone, email FROM etudiants WHERE codePermanent = ?";
            PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, codePermanent); // Remplacez codePermanent par l'identifiant de l'étudiant
            ResultSet resultSet = statement.executeQuery();

    // Récupération des informations de l'étudiant
    if (resultSet.next()) {
        String ancienNom = resultSet.getString("nom");
        String ancienPrenom = resultSet.getString("prenom");
        String ancienneDateNaissance = resultSet.getString("dateNaissance");
        String ancienneAdresse = resultSet.getString("adresse");
        String ancienTelephone = resultSet.getString("telephone");
        String ancienEmail = resultSet.getString("email");
        
        
        nomuetu.setText(ancienNom);
        pnom.setText(ancienPrenom);
        datenais.setText(ancienneDateNaissance);
        docimil.setText(ancienneAdresse);
        tel.setText(ancienTelephone);
        mail.setText(ancienEmail);
         

        // Utilisez ces valeurs pour pré-remplir les champs de votre formulaire de modification
    } else {
        setErrorLabel("impossible de recuperer");
    }
} catch (SQLException ex) {
    ex.printStackTrace();
}
    
    }
    private void modifierEtudiant() {
        
        String nouveauNom = nomuetu.getText();
        String nouveauPrenom = pnom.getText();
        String nouvelleDateNaissance = datenais.getText();
        String nouvelleAdresse = docimil.getText();
        String nouveauTelephone = tel.getText();
        String nouvelEmail = mail.getText();

        // Mettre à jour les informations de l'étudiant dans la base de données
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = connecterDB.connecterDB(); // Connexion à la base de données

            String query = "UPDATE etudiants SET nom=?, prenom=?, dateNaissance=?, adresse=?, telephone=?, email=? WHERE codePermanent=?";
            statement = connection.prepareStatement(query);
            statement.setString(1, nouveauNom);
            statement.setString(2, nouveauPrenom);
            statement.setString(3, nouvelleDateNaissance);
            statement.setString(4, nouvelleAdresse);
            statement.setString(5, nouveauTelephone);
            statement.setString(6, nouvelEmail);
            statement.setInt(7, username); // Étudiant à mettre à jour

            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                
            } else {
                 setErrorLabel("impossible de mettre a jour");
            }
        } catch (SQLException ex) {
            ex.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                }
            }
        }
    }
   
    
    public void AffichageEtudiant() {
        DefaultTableModel model;
     

        model = new DefaultTableModel();
        tableinfosetudiant.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Code Permanent");
        model.addColumn("Nom");
        model.addColumn("Prénom");
        model.addColumn("Date de Naissance");
        model.addColumn("Adresse");
        model.addColumn("Téléphone");
        model.addColumn("Email");

        // Récupérer les données de l'étudiant avec le codePermanent spécifié
        int codePermanent = username; // Remplacez cela par le codePermanent de l'étudiant que vous souhaitez afficher

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM etudiants WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();

            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("codePermanent"),
                        resultSet.getString("nom"),
                        resultSet.getString("prenom"),
                        resultSet.getString("dateNaissance"),
                        resultSet.getString("adresse"),
                        resultSet.getString("telephone"),
                        resultSet.getString("email")
                };
                model.addRow(rowData);
                tableinfosetudiant.setModel(tableinfosetudiant.getModel());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
      
 
   
//--------------------------gestion Des Messages d'erreur---------------------------------------------
    private void setErrorLabel(String message) {
        errorLabel.setText("Erreur : " + message);
    }
    
     private void setErrorLabel1(String message) {
        errorLabel1.setText("Erreur : " + message);
    }
    private void setErrorLabel2(String message) {
        errorLabel2.setText("Erreur : " + message);
    }
    private void setErrorLabel3(String message) {
        errorLabel3.setText("Erreur : " + message);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AcceuilEtudiant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AcceuilEtudiant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AcceuilEtudiant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AcceuilEtudiant.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AcceuilEtudiant().setVisible(true);
            }
        });
    }
    
//    --------------------------------- CURCUS UNIVERSITAIRE-----------------------------------------------------------
    
     private void modifierCursus() {
 int anneeDebutPromotion,anneeFinPromotion , code;
        try{
         anneeDebutPromotion = Integer.parseInt(anDebut.getText());
        
         anneeFinPromotion = Integer.parseInt(anFin.getText());
        code= username;
        if ( anneeDebutPromotion==0 || anneeFinPromotion ==0 ) {
                setErrorLabel("l'annee ne peut pas etre nul.");
           
            }
        else{
      
 
        // Connexion à la base de données
        Connection connection = connecterDB.connecterDB();
          // Ajouter la promotion à la base de données
         
            String query = "UPDATE promotions SET annee_Debut=?, annee_Fin=? WHERE codePermanent=? ";

           PreparedStatement    statement = connection.prepareStatement(query);
            statement.setInt(1, anneeDebutPromotion);
            statement.setInt(2, anneeFinPromotion); 
            statement.setInt(3, code);
                    
         
            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                
            } else {
                 setErrorLabel2("impossible de mettre a jour");
            }
            statement.close();
       
        
        }
        }catch(Exception e){
            e.printStackTrace();
            setErrorLabel2("Veuillez remplir des annees valide.");
        }


    }
   
    
    private void ancieninfosCursus(){
    
    
    int codePermanent=username;
        try {
   Connection connection = connecterDB.connecterDB(); // Connexion à la base de données
   
    String query = "SELECT annee_Debut, annee_Fin FROM promotions WHERE codePermanent = ?";
            PreparedStatement statement = connection.prepareStatement(query);
    statement.setInt(1, codePermanent); // Remplacez codePermanent par l'identifiant de l'étudiant
            ResultSet resultSet = statement.executeQuery();

    // Récupération des informations de l'étudiant
    if (resultSet.next()) {
        int ancienAnneDebut = resultSet.getInt("annee_Debut");
        int ancienAnneFin = resultSet.getInt("annee_Fin");
        
        
        
        anDebut.setText(""+ancienAnneDebut);
       anFin.setText(""+ancienAnneFin);
        
         

        // Utilisez ces valeurs pour pré-remplir les champs de votre formulaire de modification
    } else {
        setErrorLabel2("impossible de recuperer");
    }
} catch (SQLException ex) {
    ex.printStackTrace();
}
    }
    
    
    
    public void AffichageCursusUniversitaire() {
        DefaultTableModel model;
     

        model = new DefaultTableModel();
        tableCursus.setModel(model);

        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Année Début");
        model.addColumn("Année Fin");
       

        // Récupérer les données de l'étudiant avec le codePermanent spécifié
        int codePermanent = username; // Remplacez cela par le codePermanent de l'étudiant que vous souhaitez afficher

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM promotions WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau
            while (resultSet.next()) {
                String[] rowData = {
                        resultSet.getString("annee_Debut"),
                        resultSet.getString("annee_Fin"),
                        
                        
                };
                model.addRow(rowData);
                tableCursus.setModel(tableCursus.getModel());
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    
    
//    ---------------------------INSCRIPTION MASTER-----------------------------------------------
    
    
   public void supprimerInscriptionMaster(int rowIndex) {
    // Récupérer les données de la ligne sélectionnée
    String nomMaster = (String) tableInscriptionMaster.getValueAt(rowIndex, 0);
    String etablissement = (String) tableInscriptionMaster.getValueAt(rowIndex, 1);
    
    // Afficher une boîte de dialogue de confirmation pour la suppression
    int choix = JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer l'inscription au master '" + nomMaster + "' de l'établissement '" + etablissement + "' ?", "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
    
    // Si l'utilisateur confirme la suppression
    if (choix == JOptionPane.YES_OPTION) {
        // Code pour supprimer l'inscription master de la base de données
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            // Requête SQL pour supprimer l'inscription master
            String query = "DELETE FROM inscriptionmaster WHERE nomMaster = ? AND etablissement = ?";
            statement = connection.prepareStatement(query);
            statement.setString(1, nomMaster);
            statement.setString(2, etablissement);
            
            // Exécuter la requête de suppression
            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                // Afficher un message de succès
                ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
             afficheifosetudaiant.setVisible(false);
             afficheCursus.setVisible(false);
             afficheInscriptionMaster.setVisible(false);
      
                JOptionPane.showMessageDialog(null, "L'inscription au master '" + nomMaster + "' de l'établissement '" + etablissement + "' a été supprimée avec succès !");
                
               
            } else {
                JOptionPane.showMessageDialog(null, "Impossible de trouver l'inscription au master '" + nomMaster + "' de l'établissement '" + etablissement + "'.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de la suppression de l'inscription au master : " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Fermer les ressources
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

   


    
    
     public void AffichageInscripMaster() {
        DefaultTableModel model;
     

        model = new DefaultTableModel();
        tableInscriptionMaster.setModel(model);

      
        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Master");
        model.addColumn("Universite");
        model.addColumn("Supprimer");

        // Récupérer les données de l'étudiant avec le codePermanent spécifié
        int codePermanent = username; // Remplacez cela par le codePermanent de l'étudiant que vous souhaitez afficher

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM inscriptionmaster WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau
             
            while (resultSet.next()) {
              String[] rowData  = {
                        resultSet.getString("nomMaster"),
                        resultSet.getString("etablissement"),
                        "Supprimer"
                
                        
                };
                 model.addRow(rowData); 
                            }
           tableInscriptionMaster.setModel(tableInscriptionMaster.getModel());

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
    
    
    
    
    
          private void inscriptionMaster() {
        int codepermenant =username;
       String nomMaster = nMaster.getText();
        String etablissement = universite.getText();
         if (nomMaster.isEmpty() || etablissement.isEmpty()){
        setErrorLabel3("Veuillez remplir tous les champs .");

         } 
         else {
          // Connexion à la base de données
          Connection connection = connecterDB.connecterDB();
        try {
            
      
           
            String queryCursus = "INSERT INTO inscriptionmaster (nomMaster, etablissement,codePermanent) VALUES (?, ?,?)";
              PreparedStatement preparedStatementCursus = connection.prepareStatement(queryCursus);
            preparedStatementCursus.setString(1, nomMaster);
            preparedStatementCursus.setString(2, etablissement);
            preparedStatementCursus.setInt(3, codepermenant);
            preparedStatementCursus.executeUpdate();
            preparedStatementCursus.close();
            
           
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

        // Fermeture de la connexion
        try {
            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
         }
      }
    
    
//  --------------------------------------  PARCOURS SCOLAIRE ------------------------------------------------------------
       
          
          
          public void supprimerParcoursPro(int rowIndex) {
    // Récupérer les données de la ligne sélectionnée
    String posteOccupe = (String) tableParcourPro.getValueAt(rowIndex, 2);
    String entreprise = (String) tableParcourPro.getValueAt(rowIndex, 4);
    
    // Afficher une boîte de dialogue de confirmation pour la suppression
    int choix = JOptionPane.showConfirmDialog(null, "Voulez-vous vraiment supprimer le poste'" + posteOccupe + "' de l'entreprise '" + entreprise + "' ?", "Confirmation de suppression", JOptionPane.YES_NO_OPTION);
    
    // Si l'utilisateur confirme la suppression
    if (choix == JOptionPane.YES_OPTION) {
        // Code pour supprimer l'inscription master de la base de données
        Connection connection = null;
        PreparedStatement statement = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            // Requête SQL pour supprimer l'inscription master
            String query = "DELETE FROM parcoursProfessionnels WHERE posteOccupe = ? AND entreprise = ?  ";
            statement = connection.prepareStatement(query);
            statement.setString(1, posteOccupe);
            statement.setString(2, entreprise);
            
            // Exécuter la requête de suppression
            int rowsDeleted = statement.executeUpdate();
            if (rowsDeleted > 0) {
                // Afficher un message de succès
                ModifierCursusUniversite.setVisible(false);
        MenuModifierProfil.setVisible(false);
        MonProfil.setVisible(true);
        ModifierInfosEtudiant.setVisible(false);
        ModifierInscriptionMaster.setVisible(false);
        ModifierParcoursPro.setVisible(true);
        Amis.setVisible(false);
             afficheifosetudaiant.setVisible(false);
             afficheCursus.setVisible(false);
             afficheInscriptionMaster.setVisible(false);
             afficheParcourPro.setVisible(false);
      
                JOptionPane.showMessageDialog(null, "le poste'" + posteOccupe + "' de l'entreprise'" + entreprise + "' a été supprimée avec succès !");
                
               
            } else {
                JOptionPane.showMessageDialog(null, "Impossible le poste '" + posteOccupe + "' de l'entreprise '" + entreprise + "'.");
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erreur lors de la suppression du Parcours Professionnel: " + e.getMessage(), "Erreur", JOptionPane.ERROR_MESSAGE);
        } finally {
            // Fermer les ressources
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

          
          
          public void AffichageParcoursPro() {
        DefaultTableModel model;

        model = new DefaultTableModel();
        tableParcourPro.setModel(model);

      
        // Ajouter les colonnes au modèle de tableau
        model.addColumn("Anee Debut");
        model.addColumn("Anee Fin");
        model.addColumn("posteOccupe");
        model.addColumn("typeContrat");
        model.addColumn("entreprise");
        model.addColumn("Supprimer");

        // Récupérer les données de l'étudiant avec le codePermanent spécifié
        int codePermanent = username; // Remplacez cela par le codePermanent de l'étudiant que vous souhaitez afficher

        Connection connection = null;
        PreparedStatement statement = null;
        ResultSet resultSet = null;
        try {
            connection = connecterDB.connecterDB(); // Utilisez votre méthode de connexion à la base de données

            String query = "SELECT * FROM parcoursProfessionnels WHERE codePermanent = ?";
            statement = connection.prepareStatement(query);
            statement.setInt(1, codePermanent);
            resultSet = statement.executeQuery();
            // Ajouter les données de l'étudiant au modèle de tableau

            while (resultSet.next()) {
              String[] rowData  = {
                        resultSet.getString("dateDebut"),
                        resultSet.getString("dateFin"),
                        resultSet.getString("posteOccupe"),
                        resultSet.getString("typeContrat"),
                        resultSet.getString("entreprise"),
                        "Supprimer"
                
                        
                };
                 model.addRow(rowData); 
                            }
           tableParcourPro.setModel(tableParcourPro.getModel());

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Fermeture des ressources
            if (resultSet != null) {
                try {
                    resultSet.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (statement != null) {
                try {
                    statement.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }
          
          
          
          private void ajoutparcoursProfessionnel() {
     int codepermenant=username;
     int dateDebutParcours = Integer.parseInt(anneeDebutPro.getText());
        int  dateFinParcours = Integer.parseInt(anneFinPro.getText());
        String posteOccupee = posteOccupe.getText();
        String typeContrat = contrat.getText();
        String entreprisee = entreprise.getText();
        Connection connection = connecterDB.connecterDB();
        
        try {
            String queryParcours = "INSERT INTO parcoursProfessionnels (dateDebut, dateFin, posteOccupe, typeContrat, entreprise, codePermanent) VALUES (?, ?, ?, ?, ?,?)";
         PreparedStatement preparedStatementParcours = connection.prepareStatement(queryParcours);
            preparedStatementParcours.setInt(1, dateDebutParcours);
            preparedStatementParcours.setInt(2, dateFinParcours);
            preparedStatementParcours.setString(3, posteOccupee);
            preparedStatementParcours.setString(4, typeContrat);
            preparedStatementParcours.setString(5, entreprisee);
            preparedStatementParcours.setInt(6, codepermenant);


            preparedStatementParcours.executeUpdate();
            preparedStatementParcours.close();
            
            
        } catch (SQLException ex) {
            ex.printStackTrace();
        }

     
     }
     
     
   
    
 int username ;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Panel Amis;
    private java.awt.Button CursusUniversitaire;
    private java.awt.Button CursusUniversitaire1;
    private java.awt.Panel ExploitationDonnees;
    private java.awt.Button InformationEtudiant;
    private java.awt.Button InformationEtudiant1;
    private javax.swing.JTable InfostableCursus;
    private java.awt.Button InscriptionMaster;
    private java.awt.Button InscriptionMaster1;
    private java.awt.Panel MenuEtudiant;
    private java.awt.Panel MenuModifierProfil;
    private java.awt.Panel ModifierCursusUniversite;
    private java.awt.Panel ModifierInfosEtudiant;
    private java.awt.Panel ModifierInscriptionMaster;
    private java.awt.Panel ModifierParcoursPro;
    private java.awt.Panel MonProfil;
    private java.awt.Panel SupprimerUtilisateur;
    private javax.swing.JTable TableCursus;
    private javax.swing.JTable TableCursus1;
    private java.awt.Panel admin;
    private java.awt.Panel affichageUtilisateurs;
    private javax.swing.JTable afficheAmis;
    private java.awt.Panel afficheCursus;
    private java.awt.Panel afficheGestionDesDiplomes;
    private java.awt.Panel afficheInscriptionMaster;
    private java.awt.Panel afficheParcourPro;
    private java.awt.Panel afficheifosetudaiant;
    private java.awt.TextField anDebut;
    private java.awt.TextField anFin;
    private java.awt.TextField anneFinPro;
    private java.awt.TextField anneeDebutPro;
    private java.awt.Panel authentification;
    private java.awt.Button boutonParcoursPro;
    private java.awt.Button button10;
    private java.awt.Button button2;
    private java.awt.Button button6;
    private java.awt.Button buttonAmis1;
    private java.awt.Button buttonDeconnexion;
    private java.awt.Button buttonDeconnexionPersonnel;
    private java.awt.Button buttonExploitationDonnees;
    private java.awt.Button buttonGestionDiplome;
    private java.awt.Button buttonGestionDiplome1;
    private java.awt.Button buttonGestionDiplome2;
    private java.awt.Button buttonGestionUtilisateurs;
    private java.awt.Button buttonInfosEtudiant;
    private java.awt.Button buttonModifierProfil1;
    private java.awt.Button buttonModifirCursus;
    private java.awt.Button buttonMonProfil1;
    private java.awt.Button buttonParcoursPro;
    private java.awt.Button buttonSupprimmerUtilisateur;
    private java.awt.Button buttonVerificatioDiplome;
    private java.awt.Button buttonVerificationDiplomes;
    private java.awt.TextField codePermanentSupprimer;
    private java.awt.TextField codePermanentVerification;
    private java.awt.TextField contrat;
    private java.awt.TextField datenais;
    private java.awt.TextField docimil;
    private java.awt.TextField entreprise;
    private java.awt.Label errorLabel;
    private java.awt.Label errorLabel1;
    private java.awt.Label errorLabel2;
    private java.awt.Label errorLabel3;
    private java.awt.Panel etudiant;
    private javax.swing.JPanel infos;
    private javax.swing.JTable infosInscriptionMaster;
    private javax.swing.JTable infosParcoursPro;
    private javax.swing.JTable inscriptionMaster;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private java.awt.Label label1;
    private java.awt.Label label10;
    private java.awt.Label label11;
    private java.awt.Label label12;
    private java.awt.Label label13;
    private java.awt.Label label14;
    private java.awt.Label label15;
    private java.awt.Label label16;
    private java.awt.Label label17;
    private java.awt.Label label18;
    private java.awt.Label label19;
    private java.awt.Label label2;
    private java.awt.Label label20;
    private java.awt.Label label21;
    private java.awt.Label label22;
    private java.awt.Label label23;
    private java.awt.Label label24;
    private java.awt.Label label3;
    private java.awt.Label label4;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Label labelVerifier;
    private java.awt.Label labelVerifier1;
    private java.awt.Label lienRegister;
    private java.awt.TextField mail;
    private java.awt.TextField nMaster;
    private java.awt.Label nombreEtudiants;
    private java.awt.Label nombreInscriptionMaster;
    private java.awt.Label nomreContrat;
    private java.awt.TextField nomuetu;
    private java.awt.Panel panel1;
    private java.awt.Panel panel2;
    private java.awt.Panel personnel;
    private java.awt.Panel plusInfos;
    private java.awt.TextField pnom;
    private java.awt.TextField posteOccupe;
    private javax.swing.JTable tableCursus;
    private javax.swing.JTable tableEtudiant;
    private javax.swing.JTable tableGestionDiplome;
    private javax.swing.JTable tableInscriptionMaster;
    private javax.swing.JTable tableParcourPro;
    private javax.swing.JTable tablePersonnel;
    private javax.swing.JTable tableauVerification;
    private javax.swing.JTable tableauVerification1;
    private javax.swing.JTable tableauparcourPro;
    private javax.swing.JTable tableinfosetudiant;
    private java.awt.TextField tel;
    private java.awt.TextField textField1;
    private java.awt.TextField universite;
    private java.awt.Panel verificationDiplomes;
    // End of variables declaration//GEN-END:variables
}
